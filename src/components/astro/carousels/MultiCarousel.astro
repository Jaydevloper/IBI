---
import type { HTMLAttributes } from "astro/types";
type Props = HTMLAttributes<"ul"> & {
  cards: { item: string | astroHTML.JSX.Element; index?: number }[];
  id?: string;
  className?: string;
};
const randomId = crypto.randomUUID();
const {
  id = "default-carousel-" + randomId,
  className = "",
  cards = [],
  ...props
} = Astro.props;
---

<div class="w-full container mx-auto pt-24" id={id + "-wrapper"}>
  <button
    type="button"
    id={id + "-prev"}
    class="bg-gray-400 rounded-xl p-3 mb-3">Prev</button
  >
  <ul
    id={id}
    class={"grid grid-flow-col gap-2 overflow-x-auto border border-gray-300 p-2 scroll-smooth snap-mandatory snap-x " +
      className}
    style="scrollbar-width: none;"
    {...props}
  >
    {
      cards?.map((itemProps) => (
        <li id={id + "-card"} class="bg-gray-600  p-5 h-44 snap-start ">
          {itemProps?.item}
        </li>
      ))
    }
  </ul>
  <button
    type="button"
    id={id + "-next"}
    class="bg-gray-400 rounded-xl p-3 mt-3">Next</button
  >
</div>
<script is:inline defer define:vars={{ id }}>
  function initCarousel() {
    const carousel = document.querySelector(`#${id}`);
    const buttons = document.querySelectorAll(`#${id}-wrapper button`);
    const firstCardwith = document.querySelector(`#${id}-card`).offsetWidth;
    const carouselChildrens = [...carousel.children];
    let cardPreview = Math.round(carousel.offsetWidth / firstCardwith);

    carouselChildrens
      .slice(-cardPreview)
      .reverse()
      .forEach((child) => {
        carousel.insertAdjacentHTML("afterbegin", child.outerHTML);
      });

    carouselChildrens.slice(0, cardPreview).forEach((child) => {
      carousel.insertAdjacentHTML("beforeend", child.outerHTML);
    });
    carousel.addEventListener("scroll", () => {
      if (Math.ceil(carousel.scrollLeft) === 8) {
        carousel.classList.add("!scroll-auto");
        carousel.scrollLeft = carousel.scrollWidth - 2 * carousel.offsetWidth;
        carousel.classList.remove("!scroll-auto");
      } else if (
        Math.ceil(carousel.scrollLeft) >=
        carousel.scrollWidth - carousel.offsetWidth
      ) {
        carousel.classList.add("!scroll-auto");
        carousel.scrollLeft = carousel.offsetWidth;
        carousel.classList.remove("!scroll-auto");
      }
    });
    buttons.forEach((button) => {
      button.addEventListener("click", () => {
        carousel.scrollLeft +=
          button.id === id + "-prev" ? -firstCardwith : firstCardwith;
      });
    });
  }
  initCarousel();
  document.addEventListener("astro:after-swap", initCarousel);
</script>
