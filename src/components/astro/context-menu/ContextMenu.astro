---
type Props = {
  id?: string;
  title?: string;
  className?: string;
};
const randomUUID = crypto.randomUUID();
const {
  id = "default-context-menu-" + randomUUID,
  title = "Right click",
  className = "",
  ...props
} = Astro.props;
if (!Astro.slots.has("default")) {
  throw new Error("Default slot is required!");
}
---

<Fragment>
  <div class={"relative w-full max-w-xs " + className}>
    <div
      class="border border-dashed border-gray-300 p-12 text-center"
      data-id={id}
    >
      {title}
    </div>
    <ul
      class="content-hidden w-full max-w-36 rounded-md pointer-events-none bg-gray-200 p-1 absolute opacity-0 transition-opacity [&.open]:pointer-events-auto [&.open]:opacity-100 [&.open]:content-visible duration-300"
      data-id={id + "-list"}
      {...props}
    >
      <slot />
    </ul>
  </div>
</Fragment>
<script is:inline defer define:vars={{ id }}>
  function initConTextMenu() {
    const contextMenu = document.querySelector(`[data-id='${id}']`);
    const contextMenuList = document.querySelector(`[data-id='${id}-list']`);
    contextMenu?.addEventListener("contextmenu", (e) => {
      e.preventDefault();
      let x = e?.offsetX;
      let y = e?.offsetY;
      if (contextMenuList instanceof HTMLElement) {
        contextMenuList.style.left = `${x}px`;
        contextMenuList.style.top = `${y}px`;
        contextMenuList.classList.toggle("open");
      }
    });
  }
  initConTextMenu();
  document.addEventListener("astro:after-swap", initConTextMenu);
</script>
